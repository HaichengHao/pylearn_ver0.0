'''
1.字符串的驻留机制
2.字符串的常用操作
3.字符串的比较
4.字符串的切片操作
5.格式化字符串
6.字符串的编码转换
'''

'''
字符串
  在python中字符串是基本数据类型，是一个不可变的字符序列
  
什么叫字符串驻留机制呢？
仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串的驻留池中
python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同字符串时，
不会开辟新空间，而是把该字符串的地址赋给新创建的变量'''

a = 'python'
b = 'python'
c= 'python'
print(a,id(a))
print(b,id(b))
print(c,id(c))
'''
python 2209153246896
python 2209153246896
python 2209153246896
'''

'''
驻留机制的几种模式
字符串长度为0 或 1 时
符合标识符的字符串
字符串在编译时进行驻留而非运行时
[-5,256]之间的整数数字
sys中的intern方法强制2个字符串指向同一个对象
'''
# 以下为在终端运行的交互式内容
'''
------长度为0或1的字符串------
----长度为0--
>>> s1 = ''
>>> s2 = ''
>>> s1 is s2
True  

----长度为1----
>>> s1 = '%'
>>> s2 = '%'
>>> s1 is s2
True           
---不符合标识符的字符串----
>>> s1 = '100%'
>>> s2 = '100%'
>>> s1 == s2
True    <-- s1和s2内容相同，
>>> s1 is s2
False
>>> id(s1)
2189201497648   <---
>>> id(s2)             } --> 但两者的内存地址不同
2189201509680   <---

----符合标识符的字符串---
>>> s1 = 'abcx'
>>> s2 = 'abcx'
>>> s1 is s2
True
>>> id(s1)
2219881075056
>>> id(s2)
2219881075056


---字符串只在编译时进行驻留而非运行时进行驻留---
>>> a = 'abc'
>>> b = 'ab'+'c'   b在编译时字符串就已经连接完毕
>>> c = ''.join(['ab','c'])   c在运行时才连接完毕字符串
>>> a is b
True
>>> a is c
False
>>> c
'abc'
>>> type(c)
<class 'str'>
>>> type(a)
<class 'str'>

----  -5 到 256 之间的整数数字也会发生驻留  -----
>>> a = 5
>>> a = -5
>>> b = -5
>>> a is b
True
>>> a = 9
>>> b = 9
>>> a is b
True
>>> a = 256
>>> b = 256
>>> a is b
True
>>> a=-6
>>> b=-6
>>> a is b
False
>>> a = 257
>>> b = 257
>>> a is b
False
>>>
 
---  sys中的intern方法强制两个字符串指向同一个对象 ---
>>> a = 'abc%'   <--不符合标识符的字符串不驻留
>>> b = 'abc%'
>>> a is b
False       < ---并未驻留
>>> import sys
>>> a = sys.intern(b)  <--调用intern方法，强制两个字符串指向同一个对象
>>> a is b
True


-----观察id变换-----
>>> a = 'abc%'
>>> b ='abc%'
>>> id(a)
2219881661232
>>> id(b)
2219881663856
>>> a = sys.intern(b)
>>> a is b
True
>>> id(a)
2219881663856
>>> id(b)
2219881663856
>>>




关于为什么要用终端来运行本节课的代码，因为pycharm平台对字符串驻留进行了优化，原本底层并不发生驻留的情况被pycharm进行了驻留
'''

# 观察以下在pycharm中运行的结果
a = 'abc%'
b = 'abc%'
print(id(a))
print(id(b))
# 1984866741680
# 1984866741680

a = -6
b = -6
print(a is b)
# True

'''
字符串驻留机制的优缺点
当需要值相同的字符串时，可以直接从字符串池里拿来使用，
避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符除按时会比较影响性能的


在需要进行字符串拼接时建议使用str类型的join方法，而非加号连接法，因为join方法是先计算出所有字符除按中的长度，然后再拷贝，
只new一次对象，效率要比加号连接字符串高'''